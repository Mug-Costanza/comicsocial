from django.shortcuts import render
from django.views import View
from .models import Post, Comment, UserProfile
from .forms import PostForm, CommentForm
from django.contrib.auth.mixins import UserPassesTestMixin, LoginRequiredMixin
from django.urls import reverse_lazy
from django.views.generic.edit import UpdateView, DeleteView
from django.http import HttpResponseRedirect

class PostListView(LoginRequiredMixin, View):
	def get(self, request, *args, **kwargs):
		posts = Post.objects.all().order_by('-created_on')
		form = PostForm()

		context = {
			'post_list': posts,
			'form': form,
		}
		return render(request, 'post_list.html', 
context)
		
	def post(self, request, *args, **kargs):
		posts = Post.objects.all()
		form = PostForm(request.POST)
		
		if form.is_valid():
			new_post = form.save(commit=False)
			new_post.author = request.user
			new_post.save()

		context = {
			'post_list': posts,
			'form': form,
		}
		return render(request, 'post_list.html', context)

class PostDetailView(LoginRequiredMixin, View):
    def get(self, request, pk, *args, **kwargs):
        post = Post.objects.get(pk = pk)
        form = CommentForm()
        comments = Comment.objects.filter(post = post).order_by('-created_on')
        context = {
            'post': post,
            'form': form,
            'comments': comments,
        }
        return render(request, 'social/post_detail.html', context)
    def post(self, request, pk, *args, **kwargs):
        post = Post.objects.get(pk = pk)
        form = CommentForm(request.POST)
        if form.is_valid():
            new_comment = form.save(commit=False)
            new_comment.author = request.user
            new_comment.post = post
            new_comment.save()
        
        comments = Comment.objects.filter(post=post).order_by('-created_on')
        context = {
            'post': post,
            'form': form,
            'comments': comments,
        }
        return render(request, 'social/post_detail.html', context)

class PostEditView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
	model = Post
	fields = ['body']
	template_name = 'social/post_edit.html'

	def get_success_url(self):
		pk = self.kwargs['pk']
		return reverse_lazy('post-detail', kwargs={'pk':pk})
	
	def test_func(self):
		post = self.get_object()
		return self.request.user == post.author

class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
	model = Post
	template_name = 'social/post_delete.html'
	success_url = reverse_lazy('post-list')

class CommentDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
	model = Comment
	template_name = 'social/comment_delete.html'
	
	def get_success_url(self):
		pk = self,kwargs['post_pk']
		return reverse_lazy('post-detail', kwargs={'pk' : pk})

	def get_func(self):
		comment = self,get_object()
		return self.request_user == comment.author
	
class ProfileView(View):
	def get(self, requeset, pk, *args, **kwargs):
		profile = UserProfile.objects.get(pk = pk)
		user = profile.user
		posts = Post.objects.filter(author = 
user).order_by('-created_on')

		subscribers = profile.followers.all()

		for follower in subscribers:
			if follower == request.user:
				is_following = True
				break
			else:
				is_following = False

		number_of_subscribers = len(subscribers)

		context = {
			'user': user,
			'profile': profile,
			'posts': posts,
			}
			
		return render(request, 'social/templates/profile.html', context)

class ProfileEditView(LoginRequiredMixin, UserPassesTestMixin, 
UpdateView):
	model = UserProfile
	fields = ['name', 'bio', 'picture']
	template_name = 'social/templates/profile_edit.html'

	def get_success_url(self):
		pk = self.kwargs['pk']
		return reverse_lazy('profile', kwargs = {'pk' : pk})

	def test_func(self):
		profile = self.get_object()
		return self.request.user == profile.user

class AddFollower(LoginRequiredMixin, View):
	def post(self, request, pk, *args, **kwargs):
		profile = UserProfile.objects.get(pk = pk)
		profile.followers.add(requested.user)
		return redirect('profile', pk = profile.pk)

class RemoveFollower(LoginRequiredMixin, View):
	def post(self, request, pk, *args, **kwargs):
		profile = UserProfile.objects.get(pk = pk)
		profile.followers.remove(requested.user)
		return redirect('profile', pk = profile.pk)

class AddLike(LoginRequiredMixin, View):
	def post(self, request, pk, *args, **kargs):
		post = Post.objects.get(pk = pk)

		is_dislike = False

		for dislike in post.dislikes.all():
			if dislike == request.user:
				is_dislike = True
				break
		
			if is_dislike:
				post.dislikes.remove(request.user)

			is_like = False

			for like in post.likes.all():
				if like == request.user:
					is_like = True
					break

			if not is_like:
				post.likes.add(request.user)

			if is_like:
				post.likes.remove(requested.user)
			next = request.POST.get('next', '/')
			return httpResponseRedirect(next)

class AddDislike(LoginRequiredMixin, View):
	def post(self, request, pk, *args, **kwargs):
		post = Post.objects.get(pk = pk)
		is_like = False

		for like in post.likes.all():
			if like == request.user:
				is_like = True
				break

		is_dislike = False
		
		for dislike in post.dislikes.all():
			if dislike == requested.user:
				is_dislike = True
				break

		if not is_dislike:
			post.dislikes.add(requested.user)

		if is_dislike:
			post.dislikes.remove(requested.user)
		
		next = request.POST.get('next', '/')
		return HttpResponseRedirect(next)

class UserSearch(View):
	def get(self, request, *args, **kwargs):
		query = self.request.GET.get('query')
		profile_list = UserProfile.objects.filter(Q(user__username__icontains = query))
		context = { 'profile_list': profile_list}
		return render(request, 'social/search.html', context)

	logged_in_user = request.user
	posts = Post.objects.filter(
    	
author__profile__followers__in=[logged_in_user.idzz).order_by('-created_on')


